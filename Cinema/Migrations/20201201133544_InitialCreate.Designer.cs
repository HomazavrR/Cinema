// <auto-generated />
using System;
using Cinema.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cinema.Migrations
{
    [DbContext(typeof(CinemaDBContext))]
    [Migration("20201201133544_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Cinema.Models.Должности", b =>
                {
                    b.Property<int>("КодДолжности")
                        .HasColumnType("INT")
                        .HasColumnName("Код_должности");

                    b.Property<string>("НаименованиеДолжности")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Наименование_должности");

                    b.Property<string>("Обязанности")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<double>("Оклад")
                        .HasColumnType("FLOAT");

                    b.Property<string>("Требования")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("КодДолжности");

                    b.ToTable("Должности");
                });

            modelBuilder.Entity("Cinema.Models.Жанры", b =>
                {
                    b.Property<int>("КодЖанра")
                        .HasColumnType("INT")
                        .HasColumnName("Код_жанра");

                    b.Property<string>("Наименование")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Описание")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("КодЖанра");

                    b.ToTable("Жанры");
                });

            modelBuilder.Entity("Cinema.Models.Места", b =>
                {
                    b.Property<int>("НомерМеста")
                        .HasColumnType("INT")
                        .HasColumnName("Номер_места");

                    b.Property<string>("Занятость")
                        .IsRequired()
                        .HasColumnType("CHAR(1)");

                    b.Property<int>("КодСотрудника")
                        .HasColumnType("INT")
                        .HasColumnName("Код_сотрудника");

                    b.HasKey("НомерМеста");

                    b.HasIndex("КодСотрудника");

                    b.ToTable("Места");
                });

            modelBuilder.Entity("Cinema.Models.Репертуар", b =>
                {
                    b.Property<int>("КодСеанса")
                        .HasColumnType("INT")
                        .HasColumnName("Код_сеанса");

                    b.Property<DateTime>("ВремяНачала")
                        .HasColumnType("DATE")
                        .HasColumnName("Время_начала");

                    b.Property<DateTime>("ВремяОкончания")
                        .HasColumnType("DATE")
                        .HasColumnName("Время_окончания");

                    b.Property<DateTime>("Дата")
                        .HasColumnType("DATE");

                    b.Property<double>("ЦенаБилета")
                        .HasColumnType("FLOAT")
                        .HasColumnName("Цена_билета");

                    b.HasKey("КодСеанса");

                    b.ToTable("Репертуар");
                });

            modelBuilder.Entity("Cinema.Models.Сотрудники", b =>
                {
                    b.Property<int>("КодСотрудника")
                        .HasColumnType("INT")
                        .HasColumnName("Код_сотрудника");

                    b.Property<string>("Адрес")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("Возраст")
                        .HasColumnType("INT");

                    b.Property<int>("КодДолжности")
                        .HasColumnType("INT")
                        .HasColumnName("Код_должности");

                    b.Property<string>("ПаспортныеДанные")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Паспортные_данные");

                    b.Property<string>("Пол")
                        .IsRequired()
                        .HasColumnType("CHAR(3)");

                    b.Property<string>("Телефон")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)");

                    b.Property<string>("Фио")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("КодСотрудника");

                    b.HasIndex("КодДолжности");

                    b.ToTable("Сотрудники");
                });

            modelBuilder.Entity("Cinema.Models.Фильмы", b =>
                {
                    b.Property<int>("КодФильма")
                        .HasColumnType("INT")
                        .HasColumnName("Код_фильма");

                    b.Property<string>("Актеры")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("ВозрастныеОграничения")
                        .IsRequired()
                        .HasColumnType("CHAR(3)")
                        .HasColumnName("Возрастные_ограничения");

                    b.Property<double>("Длительность")
                        .HasColumnType("FLOAT");

                    b.Property<int>("КодЖанра")
                        .HasColumnType("INT")
                        .HasColumnName("Код_жанра");

                    b.Property<int>("КодСеанса")
                        .HasColumnType("INT")
                        .HasColumnName("Код_сеанса");

                    b.Property<string>("Наименование")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("НомерМеста")
                        .HasColumnType("INT")
                        .HasColumnName("Номер_места");

                    b.Property<string>("Описание")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("СтранаПроизводителя")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Страна_производителя");

                    b.Property<string>("ФирмаПроизводителя")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Фирма_производителя");

                    b.HasKey("КодФильма");

                    b.HasIndex("КодЖанра");

                    b.HasIndex("КодСеанса");

                    b.HasIndex("НомерМеста");

                    b.ToTable("Фильмы");
                });

            modelBuilder.Entity("Cinema.Models.Места", b =>
                {
                    b.HasOne("Cinema.Models.Сотрудники", "КодСотрудникаNavigation")
                        .WithMany("Местаs")
                        .HasForeignKey("КодСотрудника")
                        .IsRequired();

                    b.Navigation("КодСотрудникаNavigation");
                });

            modelBuilder.Entity("Cinema.Models.Сотрудники", b =>
                {
                    b.HasOne("Cinema.Models.Должности", "КодДолжностиNavigation")
                        .WithMany("Сотрудникиs")
                        .HasForeignKey("КодДолжности")
                        .IsRequired();

                    b.Navigation("КодДолжностиNavigation");
                });

            modelBuilder.Entity("Cinema.Models.Фильмы", b =>
                {
                    b.HasOne("Cinema.Models.Жанры", "КодЖанраNavigation")
                        .WithMany("Фильмыs")
                        .HasForeignKey("КодЖанра")
                        .IsRequired();

                    b.HasOne("Cinema.Models.Репертуар", "КодСеансаNavigation")
                        .WithMany("Фильмыs")
                        .HasForeignKey("КодСеанса")
                        .IsRequired();

                    b.HasOne("Cinema.Models.Места", "НомерМестаNavigation")
                        .WithMany("Фильмыs")
                        .HasForeignKey("НомерМеста")
                        .IsRequired();

                    b.Navigation("КодЖанраNavigation");

                    b.Navigation("КодСеансаNavigation");

                    b.Navigation("НомерМестаNavigation");
                });

            modelBuilder.Entity("Cinema.Models.Должности", b =>
                {
                    b.Navigation("Сотрудникиs");
                });

            modelBuilder.Entity("Cinema.Models.Жанры", b =>
                {
                    b.Navigation("Фильмыs");
                });

            modelBuilder.Entity("Cinema.Models.Места", b =>
                {
                    b.Navigation("Фильмыs");
                });

            modelBuilder.Entity("Cinema.Models.Репертуар", b =>
                {
                    b.Navigation("Фильмыs");
                });

            modelBuilder.Entity("Cinema.Models.Сотрудники", b =>
                {
                    b.Navigation("Местаs");
                });
#pragma warning restore 612, 618
        }
    }
}
